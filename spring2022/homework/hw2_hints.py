# Hints for Homework 2.
import numpy as np
import pandas as pd


# Problem 1
url = "https://raw.githubusercontent.com/opendp/cs208/main/spring2022/data/FultonPUMS5sample100.csv"
data = pd.read_csv(url)

pub = ["sex", "age", "educ", "latino", "black", "asian",
       "married", "divorced", "children", "disability",
       "militaryservice", "employed", "englishability"]


# Problem 1.a.i
def make_predicate():
    """Returns a random predicate function for hashing public identifiers."""
    prime = 691
    desc = np.random.randint(prime, size=len(pub))
    # this predicate maps data into a 1-d ndarray of booleans
    #   (where `@` is the dot product and `%` modulus)
    return lambda data: ((data[pub].values @ desc) % prime % 2).astype(bool)


# Problem 1.a.ii
def execute_query(predicate, data):
    """Executes a query to count the number of us citizens matched by the random predicate."""
    return data.iloc[predicate(data)]['uscitizen'].sum()


example_predicate = make_predicate()
example_result = execute_query(example_predicate, data)
# TODO: Incomplete


# Problem 1.a.iii
# TODO: Write the reconstruction function!
#       Your signature might look like this:
def reconstruct(predicates, data_pub, answers):
    """Rebuilds the uscitizen column.

    :param predicates: a list of 2n functions generated by `make_predicate`
    :param data_pub: public data
    :param answers: a list of 2n answers to a query using different example predicates
    :return: Suggestion, 1-dimensional float ndarray"""
    pass


# Problem 1.c.ii
# TODO: Prepare a dataframe of scores!
#       You are not compelled to use this code snippet to solve the problem.
def plot_losses(name, dataframe):
    """Plot scores stored in a dataframe.

    # Example calling convention
    ```
    losses = pd.DataFrame([
        {"rounding": .95, "noise": .97, "subsample": .92},
        {"rounding": .93, "noise": .95, "subsample": .90},
    ], index=[90, 100])
    plot_losses("RMSE", losses)
    ```
    """

    import matplotlib.pyplot as plt
    dataframe.plot()
    plt.title(f"{name} Reconstruction Performance")
    plt.xlabel("Parameter")
    plt.ylabel("Loss")
    plt.show()
